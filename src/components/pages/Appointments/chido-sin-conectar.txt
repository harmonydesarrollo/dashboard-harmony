// import React, { useState, useEffect } from 'react';
// import {
//   Table,
//   TableBody,
//   TableCell,
//   TableContainer,
//   TableHead,
//   TableRow,
//   Paper,
//   Button,
//   Dialog,
//   DialogTitle,
//   DialogContent,
//   DialogActions,
//   TextField,
//   FormControl,
//   InputLabel,
//   Select,
//   MenuItem,
//   Typography,
// } from '@mui/material';
// import { SelectChangeEvent } from '@mui/material/Select';

// interface Appointments {
//   id: number;
//   fullname: string;
//   telephone: string;
//   service: string;
//   time: string;
//   date: string;
//   status: string;
// }

// const initialAppointments: Appointments[] = [
//   { id: 1, fullname: 'Juan Pérez', telephone: '1234567890', service: 'Cuello', time: '08:30', date: '2024-07-01', status: 'Pagado' },
//   { id: 2, fullname: 'María López', telephone: '9876543210', service: 'Hombro', time: '10:00', date: '2024-07-02', status: 'Pagado' },
// ];

// const services = [
//   { id: 1, name: 'Cuello' },
//   { id: 2, name: 'Hombro' },
//   { id: 3, name: 'Pies' },
// ];

// const hours = [
//   '08:00', '08:30', '09:00', '09:30',
//   '10:00', '10:30', '11:00', '11:30',
//   '12:00'
// ];

// const months = [
//   { value: '01', label: 'Enero' },
//   { value: '02', label: 'Febrero' },
//   { value: '03', label: 'Marzo' },
//   { value: '04', label: 'Abril' },
//   { value: '05', label: 'Mayo' },
//   { value: '06', label: 'Junio' },
//   { value: '07', label: 'Julio' },
//   { value: '08', label: 'Agosto' },
//   { value: '09', label: 'Septiembre' },
//   { value: '10', label: 'Octubre' },
//   { value: '11', label: 'Noviembre' },
//   { value: '12', label: 'Diciembre' },
// ];

// const AppointmentListPage = () => {

//   const [searchDate, setSearchDate] = useState<string>(''); // Estado para almacenar la fecha de búsqueda
// const [searchName, setSearchName] = useState<string>(''); // Estado para almacenar el nombre de búsqueda
// const [searchStatus, setSearchStatus] = useState<string>(''); // Estado para almacenar el estado de búsqueda



//   const [open, setOpen] = useState(false);
//   const [fullname, setFullname] = useState('');
//   const [telephone, setTelephone] = useState('');
//   const [service, setService] = useState('');
//   const [modalTime, setModalTime] = useState(''); // Estado para la hora seleccionada en el diálogo
//   const [date, setDate] = useState('');
//   const [status, setStatus] = useState('Pagado');
//   const [appointments, setAppointments] = useState<Appointments[]>(initialAppointments);
//   const [selectedAppointment, setSelectedAppointment] = useState<Appointments | null>(null);
//   const [searchDay, setSearchDay] = useState<string>(''); // Estado para almacenar el día de búsqueda
//   const [searchMonth, setSearchMonth] = useState<string>(''); // Estado para almacenar el mes de búsqueda
//   const [searchTime, setSearchTime] = useState<string>(''); // Estado para almacenar la hora de búsqueda
//   const [isHourDisabled, setIsHourDisabled] = useState<boolean>(true); // Estado para controlar la habilitación del campo de horas
//   const [occupiedHours, setOccupiedHours] = useState<{ time: string; status: string }[]>([]); // Estado para almacenar las horas ocupadas

//   useEffect(() => {
//     // Filtrar horas ocupadas al cambiar el filtro de día, mes y hora
//     filterOccupiedHours();
//   }, [searchDay, searchMonth, searchTime, appointments]);

//   useEffect(() => {
//     // Actualizar el estado de isHourDisabled basado en searchDay y searchMonth
//     setIsHourDisabled(searchDay === '' || searchMonth === '');
//   }, [searchDay, searchMonth]);

//   const handleDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {
//     const selectedDate = e.target.value;
//     setDate(selectedDate);
  
//     // Filtrar las horas ocupadas para la fecha seleccionada
//     // const filteredAppointments = appointments.filter(
//     //   (appointment) => appointment.date === selectedDate
//     // );//JMS
//     const filteredAppointments = appointments.filter((appointment) =>
//       (searchDate === '' || appointment.date.includes(searchDate)) &&
//       (searchName === '' || appointment.fullname.toLowerCase().includes(searchName.toLowerCase())) &&
//       (searchStatus === '' || appointment.status.includes(searchStatus))
//     );
    
//     const occupiedTimes = filteredAppointments.map((appointment) => ({ time: appointment.time, status: appointment.status }));
//     setOccupiedHours(occupiedTimes);
//   };

//   const handleOpen = () => {
//     setOpen(true);
//     clearFields(); // Limpiar campos al abrir la modal
  
//     // Establecer la fecha según los selectores de día y mes
//     if (searchDay && searchMonth) {
//       const formattedDate = `2024-${searchMonth}-${searchDay}`; // Asumiendo que el año es fijo en 2024
//       setDate(formattedDate);
  
//       // Obtener las citas existentes para el día y mes seleccionados
//       const filteredAppointments = appointments.filter(
//         (appointment) =>
//           appointment.date.substring(8, 10) === searchDay &&
//           appointment.date.substring(5, 7) === searchMonth
//       );
  
//       const occupiedTimes = filteredAppointments.map((appointment) => ({ time: appointment.time, status: appointment.status }));
  
//       // Determinar la hora inicial para la modal
//       let initialTime = '';
  
//       if (searchTime) {
//         // Si hay una hora seleccionada en los filtros, usar esa hora si está disponible
//         const foundTime = occupiedTimes.find((time) => time.time === searchTime && !['Cancelado', 'Reprogramado'].includes(time.status));
//         if (foundTime) {
//           initialTime = searchTime;
//         }
//       }
  
//       // Si no se ha establecido una hora inicial aún, buscar la primera hora disponible del día
//       if (!initialTime) {
//         initialTime = hours.find((hour) => {
//           const foundTime = occupiedTimes.find((time) => time.time === hour && !['Cancelado', 'Reprogramado'].includes(time.status));
//           return !foundTime;
//         }) || '';
//       }
  
//       // Establecer la hora inicial en la modal
//       setModalTime(modalTime);
//     } else {
//       // Si no hay día y mes seleccionados, establecer valores por defecto
//       const today = new Date();
//       const formattedDate = today.toISOString().slice(0, 10);
//       setDate(formattedDate);
  
//       // Establecer la primera hora del día como hora inicial
//       setModalTime(hours[0]); // Aquí puedes ajustar según tu lógica de negocio
//     }
  
//     setStatus('Pagado');
//   };

//   const handleClose = () => {
//     setOpen(false);
//     clearFields();
//   };

//   const handleSaveAppointment = () => {
//     if (selectedAppointment) {
//       // Actualizar cita existente
//       const updatedAppointments = appointments.map((appointment) =>
//         appointment.id === selectedAppointment.id
//           ? { ...appointment, fullname, telephone, service, time: modalTime, date, status }
//           : appointment
//       );
//       setAppointments(updatedAppointments);
//     } else {
//       // Crear nueva cita
//       const newAppointment: Appointments = {
//         id: appointments.length + 1,
//         fullname,
//         telephone,
//         service,
//         time: modalTime, // Utilizar la hora seleccionada en la modal
//         date,
//         status,
//       };
//       setAppointments([...appointments, newAppointment]);
//     }
//     handleClose();
//   };

//   const handleEditAppointment = (appointment: Appointments) => {
//     setSelectedAppointment(appointment);
//     setFullname(appointment.fullname);
//     setTelephone(appointment.telephone);
//     setService(appointment.service);
//     setModalTime(appointment.time);
//     if(appointment.status === "Reprogramado" || appointment.status === "Cancelado"){
//       console.log('entro???')
//       setDate('');  
//     }else{
//       console.log('aqui??')
//       setDate(appointment.date);
//     }
    
//     setStatus(appointment.status);
//     setOpen(true);
  
//     // Filtrar horas ocupadas para la fecha seleccionada
//     const filteredAppointments = appointments.filter((apt) => apt.date === appointment.date);
//     const occupiedTimes = filteredAppointments.map((apt) => ({ time: apt.time, status: apt.status }));
    
//     // Configurar la visualización de horas en el selector de tiempo de la modal
//     setOccupiedHours(occupiedTimes);
//   };

//   const handleDayChange = (event: SelectChangeEvent<string>) => {
//     setSearchDay(event.target.value);
//   };

//   const handleMonthChange = (event: SelectChangeEvent<string>) => {
//     setSearchMonth(event.target.value);
//   };

//   const handleTimeChange = (event: SelectChangeEvent<string>) => {
//     setSearchTime(event.target.value);
//   };

//   const clearFields = () => {
//     setFullname('');
//     setTelephone('');
//     setService('');
//     setModalTime(''); // Limpiar la hora seleccionada al cerrar el diálogo
//     setDate('');
//     setStatus('Pagado');
//     setSelectedAppointment(null);
//   };

//   const filterOccupiedHours = () => {
//     // Filtrar las citas para la fecha seleccionada
//     if (searchDay && searchMonth) {
//       const filteredAppointments = appointments.filter((appointment) =>
//         appointment.date.substring(8, 10) === searchDay &&
//         appointment.date.substring(5, 7) === searchMonth
//       );
//       const occupiedHoursList: { time: string; status: string }[] = [];
//       filteredAppointments.forEach((appointment) => {
//         occupiedHoursList.push({ time: appointment.time, status: appointment.status });
//       });
//       setOccupiedHours(occupiedHoursList);
//     } else {
//       setOccupiedHours([]);
//     }
//   };

//   const filteredAppointments = appointments.filter((appointment) =>
//     (!searchDay || appointment.date.substring(8, 10) === searchDay) &&
//     (!searchMonth || appointment.date.substring(5, 7) === searchMonth) &&
//     (!searchTime || appointment.time === searchTime)
//   );

//   const isButtonDisabled = !searchDay || !searchMonth || !modalTime;

//   return (
//     <div style={{ padding: '20px' }}>
//       <Typography variant="h3" align="justify">
//         LISTADO DE CITAS      
//       </Typography>
//       <FormControl style={{ minWidth: '120px', marginRight: '20px', marginTop:'32px' }}>
//         <InputLabel>Día</InputLabel>
//         <Select
//           value={searchDay}
//           label="Día"
//           onChange={handleDayChange}
//         >
//           <MenuItem value="">Todos</MenuItem>
//           {Array.from({ length: 31 }, (_, index) => index + 1).map((day) => (
//             <MenuItem key={day} value={day.toString().padStart(2, '0')}>
//               {day.toString().padStart(2, '0')}
//             </MenuItem>
//           ))}
//         </Select>
//       </FormControl>

//       <FormControl style={{ minWidth: '120px', marginRight: '20px', marginTop:'32px' }}>
//         <InputLabel>Mes</InputLabel>
//         <Select
//         label='Mes'
//           value={searchMonth}
//           onChange={handleMonthChange}
//         >
//           <MenuItem value="">Todos</MenuItem>
//           {months.map((month) => (
//             <MenuItem key={month.value} value={month.value}>
//               {month.label}
//             </MenuItem>
//           ))}
//         </Select>
//       </FormControl>

//       <FormControl style={{ minWidth: '120px',  marginTop:'32px' }}>
//         <InputLabel>Hora</InputLabel>
//         <Select
//           label='Hora'
//           value={modalTime}
//           onChange={(e) => setModalTime(e.target.value as string)}
//           disabled={isHourDisabled} // Deshabilitar si no hay día o mes seleccionado
//         >
//           {hours.map((hour) => (
//             <MenuItem
//               key={hour}
//               value={hour}
//               disabled={occupiedHours.some((time) => time.time === hour && !['Cancelado', 'Reprogramado'].includes(time.status))}
//               style={{ color: occupiedHours.some((time) => time.time === hour && !['Cancelado', 'Reprogramado'].includes(time.status)) ? 'red' : 'green' }}
//             >
//               {hour}
//             </MenuItem>
//           ))}
//         </Select>
//       </FormControl>

//       <TableContainer component={Paper} style={{ marginTop: '20px' }}>
//         <Table>
//           <TableHead>
//             <TableRow style={{backgroundColor:'#0064A8'}}>
//               <TableCell style={{color:'#F9EC08', fontWeight:'bold'}}>NOMBRE COMPLETO</TableCell>
//               <TableCell style={{color:'#F9EC08',fontWeight:'bold'}}>TELÉFONO</TableCell>
//               <TableCell style={{color:'#F9EC08', fontWeight:'bold'}}>SERVICIO</TableCell>
//               <TableCell style={{color:'#F9EC08', fontWeight:'bold'}}>HORA</TableCell>
//               <TableCell style={{color:'#F9EC08', fontWeight:'bold'}}>FECHA</TableCell>
//               <TableCell style={{color:'#F9EC08', fontWeight:'bold'}}>ESTATUS</TableCell>
//               <TableCell style={{color:'#F9EC08', fontWeight:'bold'}}>ACCIONES</TableCell>
//             </TableRow>
//           </TableHead>
//           <TableBody>
//           {filteredAppointments.map((appointment) => (
//               <TableRow key={appointment.id}>
//                 <TableCell>{appointment.fullname}</TableCell>
//                 <TableCell>{appointment.telephone}</TableCell>
//                 <TableCell>{appointment.service}</TableCell>
//                 <TableCell>{appointment.time}</TableCell>
//                 <TableCell>{appointment.date}</TableCell>
//                 <TableCell style={{ backgroundColor: appointment.status === 'Pagado' ? '#00D6B2' : appointment.status === 'Cancelado' ? '#FF5252' : appointment.status === 'Pendiente' ? '#73F2FF' : '#F9EC08' }}>
//                   {appointment.status}
//                 </TableCell>
//                 <TableCell>
//                   <Button variant="outlined" color="primary" onClick={() => handleEditAppointment(appointment)}>
//                     Editar
//                   </Button>
//                 </TableCell>
//               </TableRow>
//             ))}
//           </TableBody>
//         </Table>
//       </TableContainer>
//       <Button
//         variant="contained"
//         color="primary"
//         onClick={handleOpen}
//         style={{ marginTop:'32px' }}
//         disabled={isButtonDisabled}
//       >
//         NUEVO
//       </Button>

//       <Dialog open={open} onClose={handleClose}>
//         <DialogTitle>{selectedAppointment ? 'Editar cita' : 'Nueva cita'}</DialogTitle>
//         <DialogContent>
//           <TextField
//             autoFocus
//             margin="dense"
//             label="Nombre completo"
//             fullWidth
//             value={fullname}
//             onChange={(e) => setFullname(e.target.value)}
//           />
//           <TextField
//             margin="dense"
//             label="Teléfono"
//             fullWidth
//             value={telephone}
//             onChange={(e) => setTelephone(e.target.value)}
//           />
//           <FormControl fullWidth>
//             <InputLabel>Servicio</InputLabel>
//             <Select
//               value={service}
//               onChange={(e) => setService(e.target.value as string)}
//               fullWidth
//             >
//               {services.map((s) => (
//                 <MenuItem key={s.id} value={s.name}>
//                   {s.name}
//                 </MenuItem>
//               ))}
//             </Select>
//           </FormControl>
//           <FormControl fullWidth>
//             <InputLabel>Hora editar</InputLabel>
//             <Select
//               value={modalTime}
//               onChange={(e) => setModalTime(e.target.value as string)}
//               // fullWidth
//               // disabled={isHourDisabled} // Deshabilitar si no hay fecha seleccionada
//             >
//               {hours.map((hour) => (
//                 <MenuItem
//                   key={hour}
//                   value={hour}
//                   disabled={occupiedHours.some((time) => time.time === hour && !['Cancelado', 'Reprogramado'].includes(time.status))}
//                   style={{ color: occupiedHours.some((time) => time.time === hour && !['Cancelado', 'Reprogramado'].includes(time.status)) ? 'red' : 'green' }}
//                 >
//                   {hour}
//                   {/* {status === "Cancelado" || status === "Reprogramado" ? "Elija fecha" :  hour} */}
//                 </MenuItem>
//               ))}
//             </Select>
//           </FormControl>
//           <TextField
//             margin="dense"
//             label="Fecha"
//             type="date"
//             fullWidth
//             value={date}
//             onChange={handleDateChange} // Usaremos una función específica para manejar el cambio de fecha
//             InputLabelProps={{
//               shrink: true,
//             }}
//           />

//           <FormControl fullWidth>
//             <InputLabel>Estatus</InputLabel>
//             <Select
//               value={status}
//               onChange={(e) => setStatus(e.target.value as string)}
//               fullWidth
//             >
//               <MenuItem value="Pagado">Pagado</MenuItem>
//               <MenuItem value="Cancelado">Cancelado</MenuItem>
//               <MenuItem value="Reprogramado">Reprogramado</MenuItem>
//               <MenuItem value="Pendiente">Pendiente</MenuItem>
//             </Select>
//           </FormControl>
//         </DialogContent>
//         <DialogActions>
//           <Button onClick={handleClose} color="primary">
//             Cancelar
//           </Button>
//           <Button onClick={handleSaveAppointment} color="primary">
//             Guardar
//           </Button>
//         </DialogActions>
//       </Dialog>
//     </div>
//   );
// };

// export default AppointmentListPage;